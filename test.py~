# 0.4, Rewritten.

"""SimpleEmail_SpamBot or SESB is a script that lets you spam people using Gmail, Outlook or/and iCloud"""

__author__ = "DizAzTor, LetMeWinPlease, PythonIsCool"
__copyright__ = "Copyright 2017, SESB"
__credits__ = "DizAzTor"

__license__ = "GPL"
__version__ = "0.4"
__maintainer__ = "DizAzTor"
__status__ = "Production"

try:
    import smtplib
    import getpass
    import time
    import sys
    import os
    import imaplib
    from sys import exit

except ImportError, err:
    print "Ah, %s." % err


email_number = 0  # DO NOT CHANGE THIS PLEASE.
spam_delay = 0  # DEFAULT. CAN BE CHANGED.
account_number = 0  # DO NOT CHANGE THIS PLEASE.
stop_at = 50  # DEFAULT. CAN BE CHANGED.

gmail_account = ""
outlook_account = ""
icloud_account = ""

gmail_password = ""
outlook_password = ""
icloud_password = ""

targets = []
target_number = 1

# MAX IS X ACCOUNTS.
# all_accounts = []
# usable_accounts = {}
chosen = ""


class Help(object):

    def __init__(self):
        pass

    def gmail(self):
        print "\nLog in with your GMail account."
        print "\nMake sure to enable \"less secure apps\""
        print "\nEnable it: https://myaccount.google.com/lesssecureapps"

    def outlook(self):
        print "\nLog in with your OUTLOOK account."
        print "\nMake sure to enable \"POP and IMAP\""
        print "\nEnable it: https://outlook.live.com/owa/?path=/options/popandimap"

    def icloud(self):
        print "\nLog in with your ICLOUD account."
        print "\nMake sure to use an \"app-specific password\""
        print "\nPlease read: https://support.apple.com/en-us/HT204397"
        print "\nIt should give you enough information on using an app-specific password."


class SpamMailInfo(object):

    def __init__(self):
        pass

    def set_delay(self):
        global spam_delay

        print "\nCurrent delay is set to %d (default = 0)" % spam_delay
        print "\nIt is recommended to change it."
        print "\nThe server might realize that you're spamming and the script will shutdown."
        print "\n (Gmail) Script might shutdown after: 80~100 emails."
        print "\n (Outlook) Script might shutdown after: N/A"
        print "\n (iCloud) Script might shutdown after: N/A"
        print "\nRecommended delay is 2."

        spam_delay = raw_input("\n>>> ")

        try:
            int_spam_delay = int(spam_delay)

        except ValueError:
            print "\nThat's not an integer."
            self.set_delay()

        else:
            int_spam_delay = int(spam_delay)

    def set_subject(self):

        global spam_subject

        print "\nPlease type in your subject."
        spam_subject = raw_input("\n>>> ")

    def set_message(self):

        global spam_message

        print "\nPlease type in your message."
        spam_message = raw_input("\n>>> ")


class Engine(object):

    # ENGINE SHOULD WORK
    # ENGINE VERSION 0.2

    def __init__(self):
        pass

    def google(self):

        fromaddr = "%s" % gmail_account
        msg = "\r\n".join([
            "From: %s",
            "To: %s",
            "Subject: %s",
            "",
            "%s"
        ]) % (gmail_account, targets, spam_subject, spam_message)

        username = "%s" % gmail_account
        password = "%s" % gmail_password

        server = smtplib.SMTP("smtp.gmail.com:587")
        server.ehlo()
        server.starttls()
        server.login(username, password)

        while True:
            server.sendmail(fromaddr, targets, msg)
            global email_number
            email_number += 1
            print "\nMail sent. #%s" % email_number
            time.sleep(float(spam_delay))

    def outlook(self):

        print "\nSpamming from \"%s\" to: " % outlook_account
        print "\n%s" % "\n".join(targets)

        fromaddr = "%s" % outlook_account
        msg = "\r\n".join([
            "From: %s",
            "To: %s",
            "Subject: %s",
            "",
            "%s"
        ]) % (outlook_account, targets, spam_subject, spam_message)

        username = "%s" % outlook_account
        password = "%s" % outlook_password

        server = smtplib.SMTP("smtp-mail.outlook.com:587")
        server.ehlo()
        server.starttls()
        server.login(username, password)

        while True:
            server.sendmail(fromaddr, targets, msg)
            global email_number
            email_number += 1
            print "\nMail sent. #%s" % email_number
            time.sleep(float(spam_delay))

    def icloud(self):

        fromaddr = "%s" % icloud_account
        msg = "\r\n".join([
            "From: %s",
            "To: %s",
            "Subject: %s",
            "",
            "%s"
        ]) % (icloud_account, targets, spam_subject, spam_message)

        username = "%s" % icloud_account
        password = "%s" % icloud_password

        server = smtplib.SMTP("smtp.mail.me.com:587")
        server.ehlo()
        server.starttls()
        server.login(username, password)

        while True:
            server.sendmail(fromaddr, targets, msg)
            global email_number
            email_number += 1
            print "\nMail sent. #%s" % email_number
            time.sleep(float(spam_delay))


class Targets(object):

    def __init__(self):
        pass

    def targets(self):
        global targets
        targets_status = ", ".join(targets)
        print "\nTargets: %s" % targets_status
        print "\nEvery line is a new target, please don't type them all in one line."
        print "\nWhen you're done, press ENTER."

        while True:
            global target_number
            a_new_target = raw_input("\nTarget %d: " % target_number)

            if "@" in a_new_target:
                target_number += 1
                targets.append(a_new_target)

            elif a_new_target == "":

                add_info = SpamMailInfo()
                add_info.set_delay()
                add_info.set_subject()
                add_info.set_message()

                start_engine = Engine()

                if chosen == "1":
                    start_engine.google()

                elif chosen == "2":
                    start_engine.outlook()

                elif chosen == "3":
                    start_engine.icloud()

                else:
                    print "\nI actually do not know why you got this error."
                    print "\nExiting for no reason."
                    exit(0)

            else:
                print "\nThat's not a valid email."


class iCloud(object):

    def __init__(self):
        pass

    def get_icloud_account(self):
        icloud_help = Help()
        icloud_help.icloud()
        global icloud_account
        icloud_account = raw_input("\niCloud Email: ")

        if "@icloud.com" in icloud_account:
            pass
        else:
            icloud_account += "@icloud.com"

        global icloud_password
        icloud_password = getpass.getpass("\niCloud Password: ")

        # global account_number
        # account_number += 1

        # global all_accounts
        # global usable_accounts
        # all_accounts.append(icloud_account)

        choose_targets = Targets()
        choose_targets.targets()


class Gmail(object):

    def __init__(self):
        pass

    def get_gmail_account(self):
        gmail_help = Help()
        gmail_help.gmail()
        global gmail_account
        gmail_account = raw_input("\nGmail Account: ")

        if "@gmail.com" in gmail_account:
            # nothing to do here
            pass
        else:
            gmail_account += "@gmail.com"

        global gmail_password
        gmail_password = getpass.getpass("\nGmail Password: ")

        # global account_number
        # account_number += 1

        # global all_accounts
        # global usable_accounts
        # all_accounts.append(gmail_account)

        choose_targets = Targets()
        choose_targets.targets()


class Outlook(object):

    def __init__(self):
        pass

    def get_outlook_account(self):

        outlook_help = Help()
        outlook_help.outlook()
        global outlook_account
        outlook_account = raw_input("\nOutlook Email: ")

        if "@outlook.com" in outlook_account:
            pass
        else:
            outlook_account += "@outlook.com"

        global outlook_password
        outlook_password = getpass.getpass("\nOutlook Password: ")

        # global account_number
        # account_number += 1

        # global all_accounts
        # global usable_accounts
        # all_accounts.append(outlook_account)

        choose_targets = Targets()
        choose_targets.targets()


class Email(object):

    def __init__(self):
        pass

    def choose_email(self):
        # print "\nAccounts added: %s" % account_number
        # print "\nAccounts: %s" % ", ".join(all_accounts)
        # print "\nTO EXIT: enter 0."
        global chosen
        print "\nWhat email do you wanna use?"
        print "\n\t1. GMail."
        print "\n\t2. Outlook."
        print "\n\t3. iCloud."
        choose = raw_input("\n>>> ")

        try:
            int_choose = int(choose)
        except ValueError:
            print "\nPlease insert an integer."
            self.choose_email()
        else:
            int_choose = int(choose)

            if int_choose == 1:
                chosen = "1"
                gmail = Gmail()
                gmail.get_gmail_account()
                # self.choose_email()

            elif int_choose == 2:
                chosen = "2"
                outlook = Outlook()
                outlook.get_outlook_account()
                # self.choose_email()

            elif int_choose == 3:
                chosen = "3"
                icloud = iCloud()
                icloud.get_icloud_account()
                # self.choose_email()

            # elif int_choose == 0:
                # pass

            else:
                print "\nSorry; you can only choose between these three for now."
                self.choose_email()


class Commands(object):

    def __init__(self):

        print "\nCommand Mode v0.1"

    def text_(self):
        pass

    def command_line(self):

        command = raw_input("\n>>> ")
        command = command.lower()

        global gmail_account
        global outlook_account
        global icloud_account

        global gmail_password
        global outlook_password
        global icloud_password

        if command == "add gmail":

            if outlook_account == "" and icloud_account == "":
                gmail_account = raw_input("\n>>> ")
                self.command_line()

            else:
                print "\n\"outlook_account\" and \"icloud_account\" are not empty."
                print "\nResetting them."
                outlook_account = ""
                icloud_account = ""
                print "\nDone. Type in your command again."
                self.command_line()

        elif command == "add outlook":

            if gmail_account == "" and icloud_account == "":
                outlook_account = raw_input("\n>>> ")
                self.command_line()

            else:
                print "\n\"gmail_account\" and \"icloud_account\" are not empty."
                print "\nResetting them."
                gmail_account = ""
                icloud_account = ""
                print "\nDone. Type in your command again."
                self.command_line()

        elif command == "add icloud":

            if gmail_account == "" and outlook_account == "":
                icloud_account = raw_input("\n>>> ")
                self.command_line()

            else:
                print "\n\"gmail_account\" and \"outlook_account\" are not empty."
                print "\nResetting them."
                outlook_account = ""
                icloud_account = ""
                print "\nDone. Type in your command again."
                self.command_line()

        elif command == "password gmail":

            gmail_password = ""
            gmail_password = getpass.getpass("\n>>> ")
            self.command_line()

        elif command == "password outlook":

            outlook_password = ""
            outlook_password = getpass.getpass("\n>>> ")

        elif command == "help gmail":
            pass
            self.command_line()

        elif command == "help outlook":
            pass
            self.command_line()

        elif command == "help icloud":
            pass
            self.command_line()

        elif command == "clear":

            if os.name == "nt":
                os.system("cls")
                self.command_line()

            else:
                os.system("clear")
                self.command_line()

        elif command == "comamnds":
            pass

        else:
            print "\nCommand not found. Try \"commands\" for, well, help."
            self.command_line()


if len(sys.argv) == 2 and sys.argv[1] == "-c":
    command_mode = Commands()
    command_mode.command_line()

else:
    start = Email()
    start.choose_email()
